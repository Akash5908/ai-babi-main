/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FantasyRace } from './FantasyRace';
import {
    FantasyRaceFromJSON,
    FantasyRaceFromJSONTyped,
    FantasyRaceToJSON,
    FantasyRaceToJSONTyped,
} from './FantasyRace';
import type { Occupation } from './Occupation';
import {
    OccupationFromJSON,
    OccupationFromJSONTyped,
    OccupationToJSON,
    OccupationToJSONTyped,
} from './Occupation';
import type { SpecialFeatures } from './SpecialFeatures';
import {
    SpecialFeaturesFromJSON,
    SpecialFeaturesFromJSONTyped,
    SpecialFeaturesToJSON,
    SpecialFeaturesToJSONTyped,
} from './SpecialFeatures';
import type { AvatarLooks } from './AvatarLooks';
import {
    AvatarLooksFromJSON,
    AvatarLooksFromJSONTyped,
    AvatarLooksToJSON,
    AvatarLooksToJSONTyped,
} from './AvatarLooks';
import type { Ethnicity } from './Ethnicity';
import {
    EthnicityFromJSON,
    EthnicityFromJSONTyped,
    EthnicityToJSON,
    EthnicityToJSONTyped,
} from './Ethnicity';
import type { AnimeLora } from './AnimeLora';
import {
    AnimeLoraFromJSON,
    AnimeLoraFromJSONTyped,
    AnimeLoraToJSON,
    AnimeLoraToJSONTyped,
} from './AnimeLora';
import type { ChatbotType } from './ChatbotType';
import {
    ChatbotTypeFromJSON,
    ChatbotTypeFromJSONTyped,
    ChatbotTypeToJSON,
    ChatbotTypeToJSONTyped,
} from './ChatbotType';
import type { Hobby } from './Hobby';
import {
    HobbyFromJSON,
    HobbyFromJSONTyped,
    HobbyToJSON,
    HobbyToJSONTyped,
} from './Hobby';
import type { Personality } from './Personality';
import {
    PersonalityFromJSON,
    PersonalityFromJSONTyped,
    PersonalityToJSON,
    PersonalityToJSONTyped,
} from './Personality';
import type { RelationshipStatus } from './RelationshipStatus';
import {
    RelationshipStatusFromJSON,
    RelationshipStatusFromJSONTyped,
    RelationshipStatusToJSON,
    RelationshipStatusToJSONTyped,
} from './RelationshipStatus';

/**
 * 
 * @export
 * @interface PostCustomChatBotPayload
 */
export interface PostCustomChatBotPayload {
    /**
     * 
     * @type {ChatbotType}
     * @memberof PostCustomChatBotPayload
     */
    type: ChatbotType;
    /**
     * 
     * @type {AnimeLora}
     * @memberof PostCustomChatBotPayload
     */
    animeLora?: AnimeLora | null;
    /**
     * 
     * @type {Ethnicity}
     * @memberof PostCustomChatBotPayload
     */
    ethnicity?: Ethnicity | null;
    /**
     * 
     * @type {FantasyRace}
     * @memberof PostCustomChatBotPayload
     */
    fantasyRace?: FantasyRace | null;
    /**
     * 
     * @type {number}
     * @memberof PostCustomChatBotPayload
     */
    age: number;
    /**
     * 
     * @type {AvatarLooks}
     * @memberof PostCustomChatBotPayload
     */
    looks: AvatarLooks;
    /**
     * 
     * @type {Occupation}
     * @memberof PostCustomChatBotPayload
     */
    occupation?: Occupation | null;
    /**
     * 
     * @type {Array<Hobby>}
     * @memberof PostCustomChatBotPayload
     */
    hobbies?: Array<Hobby> | null;
    /**
     * 
     * @type {Personality}
     * @memberof PostCustomChatBotPayload
     */
    personality: Personality;
    /**
     * 
     * @type {Array<SpecialFeatures>}
     * @memberof PostCustomChatBotPayload
     */
    specialFeatures: Array<SpecialFeatures>;
    /**
     * 
     * @type {RelationshipStatus}
     * @memberof PostCustomChatBotPayload
     */
    relationshipStatus: RelationshipStatus;
    /**
     * 
     * @type {string}
     * @memberof PostCustomChatBotPayload
     */
    clientId: string;
    /**
     * 
     * @type {string}
     * @memberof PostCustomChatBotPayload
     */
    userId?: string | null;
}



/**
 * Check if a given object implements the PostCustomChatBotPayload interface.
 */
export function instanceOfPostCustomChatBotPayload(value: object): value is PostCustomChatBotPayload {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('age' in value) || value['age'] === undefined) return false;
    if (!('looks' in value) || value['looks'] === undefined) return false;
    if (!('personality' in value) || value['personality'] === undefined) return false;
    if (!('specialFeatures' in value) || value['specialFeatures'] === undefined) return false;
    if (!('relationshipStatus' in value) || value['relationshipStatus'] === undefined) return false;
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    return true;
}

export function PostCustomChatBotPayloadFromJSON(json: any): PostCustomChatBotPayload {
    return PostCustomChatBotPayloadFromJSONTyped(json, false);
}

export function PostCustomChatBotPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCustomChatBotPayload {
    if (json == null) {
        return json;
    }
    return {
        
        'type': ChatbotTypeFromJSON(json['type']),
        'animeLora': json['anime_lora'] == null ? undefined : AnimeLoraFromJSON(json['anime_lora']),
        'ethnicity': json['ethnicity'] == null ? undefined : EthnicityFromJSON(json['ethnicity']),
        'fantasyRace': json['fantasy_race'] == null ? undefined : FantasyRaceFromJSON(json['fantasy_race']),
        'age': json['age'],
        'looks': AvatarLooksFromJSON(json['looks']),
        'occupation': json['occupation'] == null ? undefined : OccupationFromJSON(json['occupation']),
        'hobbies': json['hobbies'] == null ? undefined : ((json['hobbies'] as Array<any>).map(HobbyFromJSON)),
        'personality': PersonalityFromJSON(json['personality']),
        'specialFeatures': ((json['special_features'] as Array<any>).map(SpecialFeaturesFromJSON)),
        'relationshipStatus': RelationshipStatusFromJSON(json['relationship_status']),
        'clientId': json['client_id'],
        'userId': json['user_id'] == null ? undefined : json['user_id'],
    };
}

export function PostCustomChatBotPayloadToJSON(json: any): PostCustomChatBotPayload {
    return PostCustomChatBotPayloadToJSONTyped(json, false);
}

export function PostCustomChatBotPayloadToJSONTyped(value?: PostCustomChatBotPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': ChatbotTypeToJSON(value['type']),
        'anime_lora': AnimeLoraToJSON(value['animeLora']),
        'ethnicity': EthnicityToJSON(value['ethnicity']),
        'fantasy_race': FantasyRaceToJSON(value['fantasyRace']),
        'age': value['age'],
        'looks': AvatarLooksToJSON(value['looks']),
        'occupation': OccupationToJSON(value['occupation']),
        'hobbies': value['hobbies'] == null ? undefined : ((value['hobbies'] as Array<any>).map(HobbyToJSON)),
        'personality': PersonalityToJSON(value['personality']),
        'special_features': ((value['specialFeatures'] as Array<any>).map(SpecialFeaturesToJSON)),
        'relationship_status': RelationshipStatusToJSON(value['relationshipStatus']),
        'client_id': value['clientId'],
        'user_id': value['userId'],
    };
}

