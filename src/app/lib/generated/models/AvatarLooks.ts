/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EyeColor } from './EyeColor';
import {
    EyeColorFromJSON,
    EyeColorFromJSONTyped,
    EyeColorToJSON,
    EyeColorToJSONTyped,
} from './EyeColor';
import type { ButtSize } from './ButtSize';
import {
    ButtSizeFromJSON,
    ButtSizeFromJSONTyped,
    ButtSizeToJSON,
    ButtSizeToJSONTyped,
} from './ButtSize';
import type { BodyType } from './BodyType';
import {
    BodyTypeFromJSON,
    BodyTypeFromJSONTyped,
    BodyTypeToJSON,
    BodyTypeToJSONTyped,
} from './BodyType';
import type { BreastSize } from './BreastSize';
import {
    BreastSizeFromJSON,
    BreastSizeFromJSONTyped,
    BreastSizeToJSON,
    BreastSizeToJSONTyped,
} from './BreastSize';
import type { HairColor } from './HairColor';
import {
    HairColorFromJSON,
    HairColorFromJSONTyped,
    HairColorToJSON,
    HairColorToJSONTyped,
} from './HairColor';
import type { HairStyle } from './HairStyle';
import {
    HairStyleFromJSON,
    HairStyleFromJSONTyped,
    HairStyleToJSON,
    HairStyleToJSONTyped,
} from './HairStyle';

/**
 * 
 * @export
 * @interface AvatarLooks
 */
export interface AvatarLooks {
    /**
     * 
     * @type {BodyType}
     * @memberof AvatarLooks
     */
    bodyType: BodyType;
    /**
     * 
     * @type {ButtSize}
     * @memberof AvatarLooks
     */
    buttSize: ButtSize;
    /**
     * 
     * @type {BreastSize}
     * @memberof AvatarLooks
     */
    breastSize: BreastSize;
    /**
     * 
     * @type {HairColor}
     * @memberof AvatarLooks
     */
    hairColor: HairColor;
    /**
     * 
     * @type {HairStyle}
     * @memberof AvatarLooks
     */
    hairStyle: HairStyle;
    /**
     * 
     * @type {EyeColor}
     * @memberof AvatarLooks
     */
    eyeColor: EyeColor;
}



/**
 * Check if a given object implements the AvatarLooks interface.
 */
export function instanceOfAvatarLooks(value: object): value is AvatarLooks {
    if (!('bodyType' in value) || value['bodyType'] === undefined) return false;
    if (!('buttSize' in value) || value['buttSize'] === undefined) return false;
    if (!('breastSize' in value) || value['breastSize'] === undefined) return false;
    if (!('hairColor' in value) || value['hairColor'] === undefined) return false;
    if (!('hairStyle' in value) || value['hairStyle'] === undefined) return false;
    if (!('eyeColor' in value) || value['eyeColor'] === undefined) return false;
    return true;
}

export function AvatarLooksFromJSON(json: any): AvatarLooks {
    return AvatarLooksFromJSONTyped(json, false);
}

export function AvatarLooksFromJSONTyped(json: any, ignoreDiscriminator: boolean): AvatarLooks {
    if (json == null) {
        return json;
    }
    return {
        
        'bodyType': BodyTypeFromJSON(json['body_type']),
        'buttSize': ButtSizeFromJSON(json['butt_size']),
        'breastSize': BreastSizeFromJSON(json['breast_size']),
        'hairColor': HairColorFromJSON(json['hair_color']),
        'hairStyle': HairStyleFromJSON(json['hair_style']),
        'eyeColor': EyeColorFromJSON(json['eye_color']),
    };
}

export function AvatarLooksToJSON(json: any): AvatarLooks {
    return AvatarLooksToJSONTyped(json, false);
}

export function AvatarLooksToJSONTyped(value?: AvatarLooks | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'body_type': BodyTypeToJSON(value['bodyType']),
        'butt_size': ButtSizeToJSON(value['buttSize']),
        'breast_size': BreastSizeToJSON(value['breastSize']),
        'hair_color': HairColorToJSON(value['hairColor']),
        'hair_style': HairStyleToJSON(value['hairStyle']),
        'eye_color': EyeColorToJSON(value['eyeColor']),
    };
}

