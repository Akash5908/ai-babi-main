/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PictureModel } from './PictureModel';
import {
    PictureModelFromJSON,
    PictureModelFromJSONTyped,
    PictureModelToJSON,
    PictureModelToJSONTyped,
} from './PictureModel';

/**
 * 
 * @export
 * @interface ChatImagesResponse
 */
export interface ChatImagesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatImagesResponse
     */
    urls: Array<string>;
    /**
     * 
     * @type {Array<PictureModel>}
     * @memberof ChatImagesResponse
     */
    images: Array<PictureModel>;
}

/**
 * Check if a given object implements the ChatImagesResponse interface.
 */
export function instanceOfChatImagesResponse(value: object): value is ChatImagesResponse {
    if (!('urls' in value) || value['urls'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    return true;
}

export function ChatImagesResponseFromJSON(json: any): ChatImagesResponse {
    return ChatImagesResponseFromJSONTyped(json, false);
}

export function ChatImagesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatImagesResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'urls': json['urls'],
        'images': ((json['images'] as Array<any>).map(PictureModelFromJSON)),
    };
}

export function ChatImagesResponseToJSON(json: any): ChatImagesResponse {
    return ChatImagesResponseToJSONTyped(json, false);
}

export function ChatImagesResponseToJSONTyped(value?: ChatImagesResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'urls': value['urls'],
        'images': ((value['images'] as Array<any>).map(PictureModelToJSON)),
    };
}

