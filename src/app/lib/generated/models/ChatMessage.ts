/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Type1 } from './Type1';
import {
    Type1FromJSON,
    Type1FromJSONTyped,
    Type1ToJSON,
    Type1ToJSONTyped,
} from './Type1';

/**
 * 
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * 
     * @type {Type1}
     * @memberof ChatMessage
     */
    type: Type1;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    requestId: string;
}

/**
 * Check if a given object implements the ChatMessage interface.
 */
export function instanceOfChatMessage(value: object): value is ChatMessage {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('requestId' in value) || value['requestId'] === undefined) return false;
    return true;
}

export function ChatMessageFromJSON(json: any): ChatMessage {
    return ChatMessageFromJSONTyped(json, false);
}

export function ChatMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'type': Type1FromJSON(json['type']),
        'content': json['content'],
        'role': json['role'],
        'requestId': json['request_id'],
    };
}

export function ChatMessageToJSON(json: any): ChatMessage {
    return ChatMessageToJSONTyped(json, false);
}

export function ChatMessageToJSONTyped(value?: ChatMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': Type1ToJSON(value['type']),
        'content': value['content'],
        'role': value['role'],
        'request_id': value['requestId'],
    };
}

