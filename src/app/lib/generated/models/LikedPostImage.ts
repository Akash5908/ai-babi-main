/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LikedPostImage
 */
export interface LikedPostImage {
    /**
     * 
     * @type {string}
     * @memberof LikedPostImage
     */
    type: LikedPostImageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LikedPostImage
     */
    chatbotId: string;
    /**
     * 
     * @type {string}
     * @memberof LikedPostImage
     */
    chatbotName: string;
    /**
     * 
     * @type {string}
     * @memberof LikedPostImage
     */
    chatbotAvatar: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LikedPostImage
     */
    urls: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof LikedPostImage
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof LikedPostImage
     */
    postId: string;
}


/**
 * @export
 */
export const LikedPostImageTypeEnum = {
    Liked: 'liked',
    Generated: 'generated'
} as const;
export type LikedPostImageTypeEnum = typeof LikedPostImageTypeEnum[keyof typeof LikedPostImageTypeEnum];


/**
 * Check if a given object implements the LikedPostImage interface.
 */
export function instanceOfLikedPostImage(value: object): value is LikedPostImage {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('chatbotId' in value) || value['chatbotId'] === undefined) return false;
    if (!('chatbotName' in value) || value['chatbotName'] === undefined) return false;
    if (!('chatbotAvatar' in value) || value['chatbotAvatar'] === undefined) return false;
    if (!('urls' in value) || value['urls'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('postId' in value) || value['postId'] === undefined) return false;
    return true;
}

export function LikedPostImageFromJSON(json: any): LikedPostImage {
    return LikedPostImageFromJSONTyped(json, false);
}

export function LikedPostImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): LikedPostImage {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'chatbotId': json['chatbot_id'],
        'chatbotName': json['chatbot_name'],
        'chatbotAvatar': json['chatbot_avatar'],
        'urls': json['urls'],
        'createdAt': (new Date(json['created_at'])),
        'postId': json['post_id'],
    };
}

export function LikedPostImageToJSON(json: any): LikedPostImage {
    return LikedPostImageToJSONTyped(json, false);
}

export function LikedPostImageToJSONTyped(value?: LikedPostImage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'chatbot_id': value['chatbotId'],
        'chatbot_name': value['chatbotName'],
        'chatbot_avatar': value['chatbotAvatar'],
        'urls': value['urls'],
        'created_at': ((value['createdAt']).toISOString()),
        'post_id': value['postId'],
    };
}

