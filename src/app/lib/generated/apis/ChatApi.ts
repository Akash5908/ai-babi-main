/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatImagesResponse,
  ChatReponse,
  GetConversationResponse,
  HTTPValidationError,
  ListConversationsResponse,
  PostChatRequest,
} from '../models/index';
import {
    ChatImagesResponseFromJSON,
    ChatImagesResponseToJSON,
    ChatReponseFromJSON,
    ChatReponseToJSON,
    GetConversationResponseFromJSON,
    GetConversationResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListConversationsResponseFromJSON,
    ListConversationsResponseToJSON,
    PostChatRequestFromJSON,
    PostChatRequestToJSON,
} from '../models/index';

export interface ChatChatChatbotIdPostRequest {
    chatbotId: string;
    postChatRequest: PostChatRequest;
}

export interface ConversationChatChatbotIdGetRequest {
    chatbotId: string;
}

export interface DeleteConversationChatConversationChatbotIdUserUserIdDeleteRequest {
    chatbotId: string;
    userId: string;
}

export interface GetImagesChatImagesChatbotIdGetRequest {
    chatbotId: string;
}

export interface PromptChatAdminChatPostRequest {
    prompt: string;
    systemPrompt?: string | null;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * Chat
     */
    async chatChatChatbotIdPostRaw(requestParameters: ChatChatChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatReponse>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling chatChatChatbotIdPost().'
            );
        }

        if (requestParameters['postChatRequest'] == null) {
            throw new runtime.RequiredError(
                'postChatRequest',
                'Required parameter "postChatRequest" was null or undefined when calling chatChatChatbotIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chat/{chatbot_id}`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostChatRequestToJSON(requestParameters['postChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatReponseFromJSON(jsonValue));
    }

    /**
     * Chat
     */
    async chatChatChatbotIdPost(requestParameters: ChatChatChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatReponse> {
        const response = await this.chatChatChatbotIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Conversation
     */
    async conversationChatChatbotIdGetRaw(requestParameters: ConversationChatChatbotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetConversationResponse>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling conversationChatChatbotIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/{chatbot_id}`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetConversationResponseFromJSON(jsonValue));
    }

    /**
     * Conversation
     */
    async conversationChatChatbotIdGet(requestParameters: ConversationChatChatbotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetConversationResponse> {
        const response = await this.conversationChatChatbotIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Conversations
     */
    async conversationsChatGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListConversationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListConversationsResponseFromJSON(jsonValue));
    }

    /**
     * Conversations
     */
    async conversationsChatGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListConversationsResponse> {
        const response = await this.conversationsChatGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete Conversation
     */
    async deleteConversationChatConversationChatbotIdUserUserIdDeleteRaw(requestParameters: DeleteConversationChatConversationChatbotIdUserUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling deleteConversationChatConversationChatbotIdUserUserIdDelete().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteConversationChatConversationChatbotIdUserUserIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/conversation/{chatbot_id}/user/{user_id}`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Conversation
     */
    async deleteConversationChatConversationChatbotIdUserUserIdDelete(requestParameters: DeleteConversationChatConversationChatbotIdUserUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteConversationChatConversationChatbotIdUserUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Images
     */
    async getImagesChatImagesChatbotIdGetRaw(requestParameters: GetImagesChatImagesChatbotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatImagesResponse>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling getImagesChatImagesChatbotIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/images/{chatbot_id}`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatImagesResponseFromJSON(jsonValue));
    }

    /**
     * Get Images
     */
    async getImagesChatImagesChatbotIdGet(requestParameters: GetImagesChatImagesChatbotIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatImagesResponse> {
        const response = await this.getImagesChatImagesChatbotIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prompt
     */
    async promptChatAdminChatPostRaw(requestParameters: PromptChatAdminChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['prompt'] == null) {
            throw new runtime.RequiredError(
                'prompt',
                'Required parameter "prompt" was null or undefined when calling promptChatAdminChatPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['prompt'] != null) {
            queryParameters['prompt'] = requestParameters['prompt'];
        }

        if (requestParameters['systemPrompt'] != null) {
            queryParameters['system_prompt'] = requestParameters['systemPrompt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chat/admin-chat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Prompt
     */
    async promptChatAdminChatPost(requestParameters: PromptChatAdminChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.promptChatAdminChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
