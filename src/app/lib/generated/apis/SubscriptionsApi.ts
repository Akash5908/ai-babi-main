/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancelSubscriptionRequest,
  GetPricesResponse,
  GetSubscriptionInfo,
  HTTPValidationError,
  PostCheckoutResponse,
  PostCheckoutSessionRequest,
} from '../models/index';
import {
    CancelSubscriptionRequestFromJSON,
    CancelSubscriptionRequestToJSON,
    GetPricesResponseFromJSON,
    GetPricesResponseToJSON,
    GetSubscriptionInfoFromJSON,
    GetSubscriptionInfoToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PostCheckoutResponseFromJSON,
    PostCheckoutResponseToJSON,
    PostCheckoutSessionRequestFromJSON,
    PostCheckoutSessionRequestToJSON,
} from '../models/index';

export interface CallbackAddonSubscriptionAddonsCallbackSuccessGetRequest {
    txnRef: string;
}

export interface CallbackSubscriptionCallbackSuccessGetRequest {
    txnRef: string;
}

export interface CancelSubscriptionCancelPatchRequest {
    cancelSubscriptionRequest: CancelSubscriptionRequest;
}

export interface CheckoutAddonSubscriptionCheckoutAddonPostRequest {
    postCheckoutSessionRequest: PostCheckoutSessionRequest;
}

export interface CheckoutSubscriptionCheckoutPostRequest {
    postCheckoutSessionRequest: PostCheckoutSessionRequest;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     * Callback Addon
     */
    async callbackAddonSubscriptionAddonsCallbackSuccessGetRaw(requestParameters: CallbackAddonSubscriptionAddonsCallbackSuccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['txnRef'] == null) {
            throw new runtime.RequiredError(
                'txnRef',
                'Required parameter "txnRef" was null or undefined when calling callbackAddonSubscriptionAddonsCallbackSuccessGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['txnRef'] != null) {
            queryParameters['txnRef'] = requestParameters['txnRef'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscription/addons/callback/success`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Callback Addon
     */
    async callbackAddonSubscriptionAddonsCallbackSuccessGet(requestParameters: CallbackAddonSubscriptionAddonsCallbackSuccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.callbackAddonSubscriptionAddonsCallbackSuccessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Callback
     */
    async callbackSubscriptionCallbackSuccessGetRaw(requestParameters: CallbackSubscriptionCallbackSuccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['txnRef'] == null) {
            throw new runtime.RequiredError(
                'txnRef',
                'Required parameter "txnRef" was null or undefined when calling callbackSubscriptionCallbackSuccessGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['txnRef'] != null) {
            queryParameters['txnRef'] = requestParameters['txnRef'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscription/callback/success`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Callback
     */
    async callbackSubscriptionCallbackSuccessGet(requestParameters: CallbackSubscriptionCallbackSuccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.callbackSubscriptionCallbackSuccessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel
     */
    async cancelSubscriptionCancelPatchRaw(requestParameters: CancelSubscriptionCancelPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['cancelSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'cancelSubscriptionRequest',
                'Required parameter "cancelSubscriptionRequest" was null or undefined when calling cancelSubscriptionCancelPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subscription/cancel`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CancelSubscriptionRequestToJSON(requestParameters['cancelSubscriptionRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cancel
     */
    async cancelSubscriptionCancelPatch(requestParameters: CancelSubscriptionCancelPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cancelSubscriptionCancelPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checkout Addon
     */
    async checkoutAddonSubscriptionCheckoutAddonPostRaw(requestParameters: CheckoutAddonSubscriptionCheckoutAddonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCheckoutResponse>> {
        if (requestParameters['postCheckoutSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'postCheckoutSessionRequest',
                'Required parameter "postCheckoutSessionRequest" was null or undefined when calling checkoutAddonSubscriptionCheckoutAddonPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subscription/checkout/addon`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCheckoutSessionRequestToJSON(requestParameters['postCheckoutSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCheckoutResponseFromJSON(jsonValue));
    }

    /**
     * Checkout Addon
     */
    async checkoutAddonSubscriptionCheckoutAddonPost(requestParameters: CheckoutAddonSubscriptionCheckoutAddonPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCheckoutResponse> {
        const response = await this.checkoutAddonSubscriptionCheckoutAddonPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checkout
     */
    async checkoutSubscriptionCheckoutPostRaw(requestParameters: CheckoutSubscriptionCheckoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCheckoutResponse>> {
        if (requestParameters['postCheckoutSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'postCheckoutSessionRequest',
                'Required parameter "postCheckoutSessionRequest" was null or undefined when calling checkoutSubscriptionCheckoutPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subscription/checkout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCheckoutSessionRequestToJSON(requestParameters['postCheckoutSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCheckoutResponseFromJSON(jsonValue));
    }

    /**
     * Checkout
     */
    async checkoutSubscriptionCheckoutPost(requestParameters: CheckoutSubscriptionCheckoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCheckoutResponse> {
        const response = await this.checkoutSubscriptionCheckoutPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Prices
     */
    async getPricesSubscriptionPricesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPricesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscription/prices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPricesResponseFromJSON(jsonValue));
    }

    /**
     * Get Prices
     */
    async getPricesSubscriptionPricesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPricesResponse> {
        const response = await this.getPricesSubscriptionPricesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Subscription Info
     */
    async getSubscriptionInfoSubscriptionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptionInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subscription/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscriptionInfoFromJSON(jsonValue));
    }

    /**
     * Get Subscription Info
     */
    async getSubscriptionInfoSubscriptionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptionInfo> {
        const response = await this.getSubscriptionInfoSubscriptionGetRaw(initOverrides);
        return await response.value();
    }

}
