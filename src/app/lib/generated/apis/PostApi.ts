/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatImageCategory,
  ChatImageTag,
  ContentType,
  GetPostsResponse,
  HTTPValidationError,
  PatchChatImageRequest,
  UnlockResponse,
} from '../models/index';
import {
    ChatImageCategoryFromJSON,
    ChatImageCategoryToJSON,
    ChatImageTagFromJSON,
    ChatImageTagToJSON,
    ContentTypeFromJSON,
    ContentTypeToJSON,
    GetPostsResponseFromJSON,
    GetPostsResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PatchChatImageRequestFromJSON,
    PatchChatImageRequestToJSON,
    UnlockResponseFromJSON,
    UnlockResponseToJSON,
} from '../models/index';

export interface CreateGalleryPostGalleryChatbotIdPostRequest {
    chatbotId: string;
    name: string;
    pictures: Array<Blob>;
    price?: number | null;
}

export interface CreatePostChatbotIdPostRequest {
    chatbotId: string;
    pictureType: ContentType;
    pictureCategory: ChatImageCategory;
    pictures: Array<Blob>;
    description: string;
    price?: number | null;
    tag?: ChatImageTag;
}

export interface CreateVideoPostVideosChatbotIdPostRequest {
    chatbotId: string;
    videoType: ContentType;
    videos: Array<Blob>;
}

export interface DeleteAllGalleriesForChatbotPostGalleryChatbotChatbotIdDeleteRequest {
    chatbotId: string;
}

export interface DeleteChatImagePostPrivateChatChatbotIdPictureIdDeleteRequest {
    chatbotId: string;
    pictureId: string;
}

export interface DeleteGalleryPostGalleryGalleryIdDeleteRequest {
    galleryId: string;
}

export interface DeletePostPostIdDeleteRequest {
    postId: string;
}

export interface LikePostPostIdLikePutRequest {
    postId: string;
}

export interface ListPostGetRequest {
    paginationToken?: string | null;
}

export interface ListVideosPostVideosGetRequest {
    paginationToken?: string | null;
}

export interface PatchChatImagePostPrivateChatChatbotIdPictureIdPatchRequest {
    chatbotId: string;
    pictureId: string;
    patchChatImageRequest: PatchChatImageRequest;
}

export interface UnlockGalleryPostGalleryGalleryIdUnlockPutRequest {
    galleryId: string;
}

export interface UnlockPostPostIdUnlockPutRequest {
    postId: string;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     * Create Gallery
     */
    async createGalleryPostGalleryChatbotIdPostRaw(requestParameters: CreateGalleryPostGalleryChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling createGalleryPostGalleryChatbotIdPost().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createGalleryPostGalleryChatbotIdPost().'
            );
        }

        if (requestParameters['pictures'] == null) {
            throw new runtime.RequiredError(
                'pictures',
                'Required parameter "pictures" was null or undefined when calling createGalleryPostGalleryChatbotIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['price'] != null) {
            formParams.append('price', requestParameters['price'] as any);
        }

        if (requestParameters['pictures'] != null) {
            requestParameters['pictures'].forEach((element) => {
                formParams.append('pictures', element as any);
            })
        }

        const response = await this.request({
            path: `/post/gallery/{chatbot_id}/`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Gallery
     */
    async createGalleryPostGalleryChatbotIdPost(requestParameters: CreateGalleryPostGalleryChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createGalleryPostGalleryChatbotIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create
     */
    async createPostChatbotIdPostRaw(requestParameters: CreatePostChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling createPostChatbotIdPost().'
            );
        }

        if (requestParameters['pictureType'] == null) {
            throw new runtime.RequiredError(
                'pictureType',
                'Required parameter "pictureType" was null or undefined when calling createPostChatbotIdPost().'
            );
        }

        if (requestParameters['pictureCategory'] == null) {
            throw new runtime.RequiredError(
                'pictureCategory',
                'Required parameter "pictureCategory" was null or undefined when calling createPostChatbotIdPost().'
            );
        }

        if (requestParameters['pictures'] == null) {
            throw new runtime.RequiredError(
                'pictures',
                'Required parameter "pictures" was null or undefined when calling createPostChatbotIdPost().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling createPostChatbotIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['pictureType'] != null) {
            formParams.append('picture_type', requestParameters['pictureType'] as any);
        }

        if (requestParameters['pictureCategory'] != null) {
            formParams.append('picture_category', requestParameters['pictureCategory'] as any);
        }

        if (requestParameters['price'] != null) {
            formParams.append('price', requestParameters['price'] as any);
        }

        if (requestParameters['pictures'] != null) {
            requestParameters['pictures'].forEach((element) => {
                formParams.append('pictures', element as any);
            })
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['tag'] != null) {
            formParams.append('tag', requestParameters['tag'] as any);
        }

        const response = await this.request({
            path: `/post/{chatbot_id}/`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create
     */
    async createPostChatbotIdPost(requestParameters: CreatePostChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createPostChatbotIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Video
     */
    async createVideoPostVideosChatbotIdPostRaw(requestParameters: CreateVideoPostVideosChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling createVideoPostVideosChatbotIdPost().'
            );
        }

        if (requestParameters['videoType'] == null) {
            throw new runtime.RequiredError(
                'videoType',
                'Required parameter "videoType" was null or undefined when calling createVideoPostVideosChatbotIdPost().'
            );
        }

        if (requestParameters['videos'] == null) {
            throw new runtime.RequiredError(
                'videos',
                'Required parameter "videos" was null or undefined when calling createVideoPostVideosChatbotIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['videoType'] != null) {
            formParams.append('video_type', requestParameters['videoType'] as any);
        }

        if (requestParameters['videos'] != null) {
            requestParameters['videos'].forEach((element) => {
                formParams.append('videos', element as any);
            })
        }

        const response = await this.request({
            path: `/post/videos/{chatbot_id}/`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Video
     */
    async createVideoPostVideosChatbotIdPost(requestParameters: CreateVideoPostVideosChatbotIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createVideoPostVideosChatbotIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete All Galleries For Chatbot
     */
    async deleteAllGalleriesForChatbotPostGalleryChatbotChatbotIdDeleteRaw(requestParameters: DeleteAllGalleriesForChatbotPostGalleryChatbotChatbotIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling deleteAllGalleriesForChatbotPostGalleryChatbotChatbotIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/gallery/chatbot/{chatbot_id}/`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete All Galleries For Chatbot
     */
    async deleteAllGalleriesForChatbotPostGalleryChatbotChatbotIdDelete(requestParameters: DeleteAllGalleriesForChatbotPostGalleryChatbotChatbotIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteAllGalleriesForChatbotPostGalleryChatbotChatbotIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Chat Image
     */
    async deleteChatImagePostPrivateChatChatbotIdPictureIdDeleteRaw(requestParameters: DeleteChatImagePostPrivateChatChatbotIdPictureIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling deleteChatImagePostPrivateChatChatbotIdPictureIdDelete().'
            );
        }

        if (requestParameters['pictureId'] == null) {
            throw new runtime.RequiredError(
                'pictureId',
                'Required parameter "pictureId" was null or undefined when calling deleteChatImagePostPrivateChatChatbotIdPictureIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/private-chat/{chatbot_id}/{picture_id}`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))).replace(`{${"picture_id"}}`, encodeURIComponent(String(requestParameters['pictureId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Chat Image
     */
    async deleteChatImagePostPrivateChatChatbotIdPictureIdDelete(requestParameters: DeleteChatImagePostPrivateChatChatbotIdPictureIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteChatImagePostPrivateChatChatbotIdPictureIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Gallery
     */
    async deleteGalleryPostGalleryGalleryIdDeleteRaw(requestParameters: DeleteGalleryPostGalleryGalleryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['galleryId'] == null) {
            throw new runtime.RequiredError(
                'galleryId',
                'Required parameter "galleryId" was null or undefined when calling deleteGalleryPostGalleryGalleryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/gallery/{gallery_id}/`.replace(`{${"gallery_id"}}`, encodeURIComponent(String(requestParameters['galleryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Gallery
     */
    async deleteGalleryPostGalleryGalleryIdDelete(requestParameters: DeleteGalleryPostGalleryGalleryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteGalleryPostGalleryGalleryIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deletePostPostIdDeleteRaw(requestParameters: DeletePostPostIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deletePostPostIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/{post_id}/`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete
     */
    async deletePostPostIdDelete(requestParameters: DeletePostPostIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletePostPostIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Like
     */
    async likePostPostIdLikePutRaw(requestParameters: LikePostPostIdLikePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling likePostPostIdLikePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/{post_id}/like`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Like
     */
    async likePostPostIdLikePut(requestParameters: LikePostPostIdLikePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.likePostPostIdLikePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List
     */
    async listPostGetRaw(requestParameters: ListPostGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['paginationToken'] != null) {
            queryParameters['pagination_token'] = requestParameters['paginationToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostsResponseFromJSON(jsonValue));
    }

    /**
     * List
     */
    async listPostGet(requestParameters: ListPostGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostsResponse> {
        const response = await this.listPostGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Videos
     */
    async listVideosPostVideosGetRaw(requestParameters: ListVideosPostVideosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPostsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['paginationToken'] != null) {
            queryParameters['pagination_token'] = requestParameters['paginationToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/videos/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPostsResponseFromJSON(jsonValue));
    }

    /**
     * List Videos
     */
    async listVideosPostVideosGet(requestParameters: ListVideosPostVideosGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPostsResponse> {
        const response = await this.listVideosPostVideosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch Chat Image
     */
    async patchChatImagePostPrivateChatChatbotIdPictureIdPatchRaw(requestParameters: PatchChatImagePostPrivateChatChatbotIdPictureIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['chatbotId'] == null) {
            throw new runtime.RequiredError(
                'chatbotId',
                'Required parameter "chatbotId" was null or undefined when calling patchChatImagePostPrivateChatChatbotIdPictureIdPatch().'
            );
        }

        if (requestParameters['pictureId'] == null) {
            throw new runtime.RequiredError(
                'pictureId',
                'Required parameter "pictureId" was null or undefined when calling patchChatImagePostPrivateChatChatbotIdPictureIdPatch().'
            );
        }

        if (requestParameters['patchChatImageRequest'] == null) {
            throw new runtime.RequiredError(
                'patchChatImageRequest',
                'Required parameter "patchChatImageRequest" was null or undefined when calling patchChatImagePostPrivateChatChatbotIdPictureIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/post/private-chat/{chatbot_id}/{picture_id}`.replace(`{${"chatbot_id"}}`, encodeURIComponent(String(requestParameters['chatbotId']))).replace(`{${"picture_id"}}`, encodeURIComponent(String(requestParameters['pictureId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchChatImageRequestToJSON(requestParameters['patchChatImageRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Patch Chat Image
     */
    async patchChatImagePostPrivateChatChatbotIdPictureIdPatch(requestParameters: PatchChatImagePostPrivateChatChatbotIdPictureIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.patchChatImagePostPrivateChatChatbotIdPictureIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlock Gallery
     */
    async unlockGalleryPostGalleryGalleryIdUnlockPutRaw(requestParameters: UnlockGalleryPostGalleryGalleryIdUnlockPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnlockResponse>> {
        if (requestParameters['galleryId'] == null) {
            throw new runtime.RequiredError(
                'galleryId',
                'Required parameter "galleryId" was null or undefined when calling unlockGalleryPostGalleryGalleryIdUnlockPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/gallery/{gallery_id}/unlock`.replace(`{${"gallery_id"}}`, encodeURIComponent(String(requestParameters['galleryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlockResponseFromJSON(jsonValue));
    }

    /**
     * Unlock Gallery
     */
    async unlockGalleryPostGalleryGalleryIdUnlockPut(requestParameters: UnlockGalleryPostGalleryGalleryIdUnlockPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnlockResponse> {
        const response = await this.unlockGalleryPostGalleryGalleryIdUnlockPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlock
     */
    async unlockPostPostIdUnlockPutRaw(requestParameters: UnlockPostPostIdUnlockPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnlockResponse>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling unlockPostPostIdUnlockPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/post/{post_id}/unlock`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlockResponseFromJSON(jsonValue));
    }

    /**
     * Unlock
     */
    async unlockPostPostIdUnlockPut(requestParameters: UnlockPostPostIdUnlockPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnlockResponse> {
        const response = await this.unlockPostPostIdUnlockPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
