/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteUserRequest,
  GetClaimablesResponse,
  GetGalleryResponse,
  HTTPValidationError,
  PatchUserRequest,
  PostClaimRequest,
  PostRatingRequest,
  PostRatingResponse,
  PutPasswordRequest,
  PutUsernameRequest,
} from '../models/index';
import {
    DeleteUserRequestFromJSON,
    DeleteUserRequestToJSON,
    GetClaimablesResponseFromJSON,
    GetClaimablesResponseToJSON,
    GetGalleryResponseFromJSON,
    GetGalleryResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PatchUserRequestFromJSON,
    PatchUserRequestToJSON,
    PostClaimRequestFromJSON,
    PostClaimRequestToJSON,
    PostRatingRequestFromJSON,
    PostRatingRequestToJSON,
    PostRatingResponseFromJSON,
    PostRatingResponseToJSON,
    PutPasswordRequestFromJSON,
    PutPasswordRequestToJSON,
    PutUsernameRequestFromJSON,
    PutUsernameRequestToJSON,
} from '../models/index';

export interface ClaimUserClaimPostRequest {
    postClaimRequest: PostClaimRequest;
}

export interface DeleteUserDeleteRequest {
    deleteUserRequest: DeleteUserRequest;
}

export interface PatchUserPatchRequest {
    patchUserRequest: PatchUserRequest;
}

export interface PostRatingUserRatingPostRequest {
    postRatingRequest: PostRatingRequest;
}

export interface UpdatePasswordUserPasswordPutRequest {
    putPasswordRequest: PutPasswordRequest;
}

export interface UpdateUsernameUserUsernamePutRequest {
    putUsernameRequest: PutUsernameRequest;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Claim
     */
    async claimUserClaimPostRaw(requestParameters: ClaimUserClaimPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['postClaimRequest'] == null) {
            throw new runtime.RequiredError(
                'postClaimRequest',
                'Required parameter "postClaimRequest" was null or undefined when calling claimUserClaimPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/claim`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostClaimRequestToJSON(requestParameters['postClaimRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Claim
     */
    async claimUserClaimPost(requestParameters: ClaimUserClaimPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.claimUserClaimPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete
     */
    async deleteUserDeleteRaw(requestParameters: DeleteUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['deleteUserRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteUserRequest',
                'Required parameter "deleteUserRequest" was null or undefined when calling deleteUserDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteUserRequestToJSON(requestParameters['deleteUserRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete
     */
    async deleteUserDelete(requestParameters: DeleteUserDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteUserDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Claimables
     */
    async getClaimablesUserClaimablesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClaimablesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/claimables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClaimablesResponseFromJSON(jsonValue));
    }

    /**
     * Get Claimables
     */
    async getClaimablesUserClaimablesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClaimablesResponse> {
        const response = await this.getClaimablesUserClaimablesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Gallery
     */
    async getGalleryUserGalleryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGalleryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/gallery`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGalleryResponseFromJSON(jsonValue));
    }

    /**
     * Get Gallery
     */
    async getGalleryUserGalleryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGalleryResponse> {
        const response = await this.getGalleryUserGalleryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Patch
     */
    async patchUserPatchRaw(requestParameters: PatchUserPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['patchUserRequest'] == null) {
            throw new runtime.RequiredError(
                'patchUserRequest',
                'Required parameter "patchUserRequest" was null or undefined when calling patchUserPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserRequestToJSON(requestParameters['patchUserRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Patch
     */
    async patchUserPatch(requestParameters: PatchUserPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.patchUserPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Post Rating
     */
    async postRatingUserRatingPostRaw(requestParameters: PostRatingUserRatingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostRatingResponse>> {
        if (requestParameters['postRatingRequest'] == null) {
            throw new runtime.RequiredError(
                'postRatingRequest',
                'Required parameter "postRatingRequest" was null or undefined when calling postRatingUserRatingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/rating`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRatingRequestToJSON(requestParameters['postRatingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostRatingResponseFromJSON(jsonValue));
    }

    /**
     * Post Rating
     */
    async postRatingUserRatingPost(requestParameters: PostRatingUserRatingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostRatingResponse> {
        const response = await this.postRatingUserRatingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Password
     */
    async updatePasswordUserPasswordPutRaw(requestParameters: UpdatePasswordUserPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['putPasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'putPasswordRequest',
                'Required parameter "putPasswordRequest" was null or undefined when calling updatePasswordUserPasswordPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPasswordRequestToJSON(requestParameters['putPasswordRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Password
     */
    async updatePasswordUserPasswordPut(requestParameters: UpdatePasswordUserPasswordPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updatePasswordUserPasswordPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Username
     */
    async updateUsernameUserUsernamePutRaw(requestParameters: UpdateUsernameUserUsernamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['putUsernameRequest'] == null) {
            throw new runtime.RequiredError(
                'putUsernameRequest',
                'Required parameter "putUsernameRequest" was null or undefined when calling updateUsernameUserUsernamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/username`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutUsernameRequestToJSON(requestParameters['putUsernameRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Username
     */
    async updateUsernameUserUsernamePut(requestParameters: UpdateUsernameUserUsernamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateUsernameUserUsernamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
