/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  InstanceDetails,
  InstanceType,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InstanceDetailsFromJSON,
    InstanceDetailsToJSON,
    InstanceTypeFromJSON,
    InstanceTypeToJSON,
} from '../models/index';

export interface CheckServerServerGeneratingPostRequest {
    serverUrl: string;
}

export interface GetInstancesServerInstancesGetRequest {
    type: InstanceType;
}

export interface RestartServerServerRestartPostRequest {
    type: InstanceType;
    serverUrl: string;
}

export interface StartServerServerStartPostRequest {
    type: InstanceType;
}

export interface StopServerServerStopDeleteRequest {
    type: InstanceType;
    serverUrl: string;
}

/**
 * 
 */
export class ServerApi extends runtime.BaseAPI {

    /**
     * Check Server
     */
    async checkServerServerGeneratingPostRaw(requestParameters: CheckServerServerGeneratingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['serverUrl'] == null) {
            throw new runtime.RequiredError(
                'serverUrl',
                'Required parameter "serverUrl" was null or undefined when calling checkServerServerGeneratingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['serverUrl'] != null) {
            formParams.append('server_url', requestParameters['serverUrl'] as any);
        }

        const response = await this.request({
            path: `/server/generating`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check Server
     */
    async checkServerServerGeneratingPost(requestParameters: CheckServerServerGeneratingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkServerServerGeneratingPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Instances
     */
    async getInstancesServerInstancesGetRaw(requestParameters: GetInstancesServerInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string | null>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling getInstancesServerInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server/instances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Instances
     */
    async getInstancesServerInstancesGet(requestParameters: GetInstancesServerInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string | null>> {
        const response = await this.getInstancesServerInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restart Server
     */
    async restartServerServerRestartPostRaw(requestParameters: RestartServerServerRestartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling restartServerServerRestartPost().'
            );
        }

        if (requestParameters['serverUrl'] == null) {
            throw new runtime.RequiredError(
                'serverUrl',
                'Required parameter "serverUrl" was null or undefined when calling restartServerServerRestartPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['serverUrl'] != null) {
            formParams.append('server_url', requestParameters['serverUrl'] as any);
        }

        const response = await this.request({
            path: `/server/restart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Restart Server
     */
    async restartServerServerRestartPost(requestParameters: RestartServerServerRestartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.restartServerServerRestartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start Server
     */
    async startServerServerStartPostRaw(requestParameters: StartServerServerStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstanceDetails>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling startServerServerStartPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/server/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstanceDetailsFromJSON(jsonValue));
    }

    /**
     * Start Server
     */
    async startServerServerStartPost(requestParameters: StartServerServerStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstanceDetails> {
        const response = await this.startServerServerStartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop Server
     */
    async stopServerServerStopDeleteRaw(requestParameters: StopServerServerStopDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling stopServerServerStopDelete().'
            );
        }

        if (requestParameters['serverUrl'] == null) {
            throw new runtime.RequiredError(
                'serverUrl',
                'Required parameter "serverUrl" was null or undefined when calling stopServerServerStopDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['serverUrl'] != null) {
            formParams.append('server_url', requestParameters['serverUrl'] as any);
        }

        const response = await this.request({
            path: `/server/stop`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stop Server
     */
    async stopServerServerStopDelete(requestParameters: StopServerServerStopDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.stopServerServerStopDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
