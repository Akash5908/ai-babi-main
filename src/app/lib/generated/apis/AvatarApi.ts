/* tslint:disable */
/* eslint-disable */
/**
 * AI Babe Public API
 * Lorem ipsum
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PostAvatarManual,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PostAvatarManualFromJSON,
    PostAvatarManualToJSON,
} from '../models/index';

export interface AvatarManualAvatarManualPostRequest {
    postAvatarManual: PostAvatarManual;
}

export interface ImageAvatarPostRequest {
    picture: Blob;
    name: string;
}

/**
 * 
 */
export class AvatarApi extends runtime.BaseAPI {

    /**
     * Avatar Manual
     */
    async avatarManualAvatarManualPostRaw(requestParameters: AvatarManualAvatarManualPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['postAvatarManual'] == null) {
            throw new runtime.RequiredError(
                'postAvatarManual',
                'Required parameter "postAvatarManual" was null or undefined when calling avatarManualAvatarManualPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/avatar/manual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAvatarManualToJSON(requestParameters['postAvatarManual']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Avatar Manual
     */
    async avatarManualAvatarManualPost(requestParameters: AvatarManualAvatarManualPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.avatarManualAvatarManualPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Image
     */
    async imageAvatarPostRaw(requestParameters: ImageAvatarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['picture'] == null) {
            throw new runtime.RequiredError(
                'picture',
                'Required parameter "picture" was null or undefined when calling imageAvatarPost().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling imageAvatarPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['picture'] != null) {
            formParams.append('picture', requestParameters['picture'] as any);
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        const response = await this.request({
            path: `/avatar/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Image
     */
    async imageAvatarPost(requestParameters: ImageAvatarPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.imageAvatarPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Avatars
     */
    async listAvatarsAvatarGetNamesPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string | null>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/avatar/get/names`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List Avatars
     */
    async listAvatarsAvatarGetNamesPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string | null>> {
        const response = await this.listAvatarsAvatarGetNamesPostRaw(initOverrides);
        return await response.value();
    }

}
